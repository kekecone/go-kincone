// Code generated by go-swagger; DO NOT EDIT.

package attendance_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attendance flags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attendance flags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAttendanceFlags(params *DeleteAttendanceFlagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAttendanceFlagsOK, error)

	PostAttendanceFlags(params *PostAttendanceFlagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAttendanceFlagsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAttendanceFlags 休日等の種別削除s

  メールアドレスと日付を指定して勤怠明細に登録されている休日等の種別を削除します。
*/
func (a *Client) DeleteAttendanceFlags(params *DeleteAttendanceFlagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAttendanceFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttendanceFlagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAttendanceFlags",
		Method:             "DELETE",
		PathPattern:        "/attendance/flags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAttendanceFlagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAttendanceFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAttendanceFlags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAttendanceFlags 休日等の種別設定s

  メールアドレスと日付を指定して勤怠明細に休日等の種別を登録します。ワークフロー利用が ON になっている休日等の種別は指定できません。
*/
func (a *Client) PostAttendanceFlags(params *PostAttendanceFlagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAttendanceFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAttendanceFlagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAttendanceFlags",
		Method:             "POST",
		PathPattern:        "/attendance/flags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAttendanceFlagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAttendanceFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAttendanceFlags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
