// Code generated by go-swagger; DO NOT EDIT.

package attendance_workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attendance workflows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attendance workflows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAttendanceWorkflowWorkflowID(params *DeleteAttendanceWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAttendanceWorkflowWorkflowIDOK, error)

	GetAttendanceWorkflows(params *GetAttendanceWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAttendanceWorkflowsOK, error)

	PostAttendanceWorkflowWorkflowID(params *PostAttendanceWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAttendanceWorkflowWorkflowIDOK, error)

	PutAttendanceWorkflowWorkflowID(params *PutAttendanceWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAttendanceWorkflowWorkflowIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAttendanceWorkflowWorkflowID 勤怠申請差戻しs

  指定した申請IDに該当する勤怠の申請を差戻します。
*/
func (a *Client) DeleteAttendanceWorkflowWorkflowID(params *DeleteAttendanceWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAttendanceWorkflowWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttendanceWorkflowWorkflowIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAttendanceWorkflowWorkflowID",
		Method:             "DELETE",
		PathPattern:        "/attendance/workflow/{workflowID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAttendanceWorkflowWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAttendanceWorkflowWorkflowIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAttendanceWorkflowWorkflowID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttendanceWorkflows 勤怠申請一覧取得s

  指定した期間の勤怠申請一覧を返します。
*/
func (a *Client) GetAttendanceWorkflows(params *GetAttendanceWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAttendanceWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttendanceWorkflowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAttendanceWorkflows",
		Method:             "GET",
		PathPattern:        "/attendance/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAttendanceWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttendanceWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAttendanceWorkflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAttendanceWorkflowWorkflowID 勤怠申請承認s

  指定した申請IDに該当する勤怠の申請を承認します。
*/
func (a *Client) PostAttendanceWorkflowWorkflowID(params *PostAttendanceWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAttendanceWorkflowWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAttendanceWorkflowWorkflowIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAttendanceWorkflowWorkflowID",
		Method:             "POST",
		PathPattern:        "/attendance/workflow/{workflowID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAttendanceWorkflowWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAttendanceWorkflowWorkflowIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAttendanceWorkflowWorkflowID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAttendanceWorkflowWorkflowID 勤怠申請承認取消s

  指定した申請IDに該当する勤怠の承認を取り消します。
*/
func (a *Client) PutAttendanceWorkflowWorkflowID(params *PutAttendanceWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAttendanceWorkflowWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAttendanceWorkflowWorkflowIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAttendanceWorkflowWorkflowID",
		Method:             "PUT",
		PathPattern:        "/attendance/workflow/{workflowID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAttendanceWorkflowWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAttendanceWorkflowWorkflowIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAttendanceWorkflowWorkflowID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
