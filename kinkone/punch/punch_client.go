// Code generated by go-swagger; DO NOT EDIT.

package punch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new punch API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for punch API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostPunchBack(params *PostPunchBackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchBackOK, error)

	PostPunchBreak(params *PostPunchBreakParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchBreakOK, error)

	PostPunchIn(params *PostPunchInParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchInOK, error)

	PostPunchOut(params *PostPunchOutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchOutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PostPunchBack 復帰打刻s

  リクエストを受け付けた時刻を休憩終了時刻として記録します。
*/
func (a *Client) PostPunchBack(params *PostPunchBackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchBackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPunchBackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPunchBack",
		Method:             "POST",
		PathPattern:        "/punch/back",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPunchBackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPunchBackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPunchBack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPunchBreak 休憩打刻s

  リクエストを受け付けた時刻を休憩開始時刻として記録します。
*/
func (a *Client) PostPunchBreak(params *PostPunchBreakParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchBreakOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPunchBreakParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPunchBreak",
		Method:             "POST",
		PathPattern:        "/punch/break",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPunchBreakReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPunchBreakOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPunchBreak: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPunchIn 出勤打刻s

  リクエストを受け付けた時刻を出勤時刻として記録します。既に出勤済みの場合は勤怠データは更新されません。
*/
func (a *Client) PostPunchIn(params *PostPunchInParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchInOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPunchInParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPunchIn",
		Method:             "POST",
		PathPattern:        "/punch/in",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPunchInReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPunchInOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPunchIn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPunchOut 退勤打刻s

  リクエストを受け付けた時刻を退勤時刻として記録します。既に退勤済みの場合は勤怠データを更新します。
*/
func (a *Client) PostPunchOut(params *PostPunchOutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostPunchOutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPunchOutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPunchOut",
		Method:             "POST",
		PathPattern:        "/punch/out",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPunchOutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPunchOutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPunchOut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
