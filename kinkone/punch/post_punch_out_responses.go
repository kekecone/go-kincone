// Code generated by go-swagger; DO NOT EDIT.

package punch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kekecone/go-kincone/kinkone"
)

// PostPunchOutReader is a Reader for the PostPunchOut structure.
type PostPunchOutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPunchOutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostPunchOutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostPunchOutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostPunchOutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostPunchOutUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostPunchOutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostPunchOutOK creates a PostPunchOutOK with default headers values
func NewPostPunchOutOK() *PostPunchOutOK {
	return &PostPunchOutOK{}
}

/* PostPunchOutOK describes a response with status code 200, with default header values.

正常時
*/
type PostPunchOutOK struct {
	Payload *PostPunchOutOKBody
}

func (o *PostPunchOutOK) Error() string {
	return fmt.Sprintf("[POST /punch/out][%d] postPunchOutOK  %+v", 200, o.Payload)
}
func (o *PostPunchOutOK) GetPayload() *PostPunchOutOKBody {
	return o.Payload
}

func (o *PostPunchOutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostPunchOutOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchOutUnauthorized creates a PostPunchOutUnauthorized with default headers values
func NewPostPunchOutUnauthorized() *PostPunchOutUnauthorized {
	return &PostPunchOutUnauthorized{}
}

/* PostPunchOutUnauthorized describes a response with status code 401, with default header values.

APIトークンの値を確認して下さい。
*/
type PostPunchOutUnauthorized struct {
	Payload *kinkone.ErrorModel
}

func (o *PostPunchOutUnauthorized) Error() string {
	return fmt.Sprintf("[POST /punch/out][%d] postPunchOutUnauthorized  %+v", 401, o.Payload)
}
func (o *PostPunchOutUnauthorized) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostPunchOutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchOutForbidden creates a PostPunchOutForbidden with default headers values
func NewPostPunchOutForbidden() *PostPunchOutForbidden {
	return &PostPunchOutForbidden{}
}

/* PostPunchOutForbidden describes a response with status code 403, with default header values.

APIにアクセスする権限がありません。
*/
type PostPunchOutForbidden struct {
	Payload *kinkone.ErrorModel
}

func (o *PostPunchOutForbidden) Error() string {
	return fmt.Sprintf("[POST /punch/out][%d] postPunchOutForbidden  %+v", 403, o.Payload)
}
func (o *PostPunchOutForbidden) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostPunchOutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchOutUnprocessableEntity creates a PostPunchOutUnprocessableEntity with default headers values
func NewPostPunchOutUnprocessableEntity() *PostPunchOutUnprocessableEntity {
	return &PostPunchOutUnprocessableEntity{}
}

/* PostPunchOutUnprocessableEntity describes a response with status code 422, with default header values.

パラメータの値を確認して下さい。
*/
type PostPunchOutUnprocessableEntity struct {
	Payload *kinkone.ErrorModel
}

func (o *PostPunchOutUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /punch/out][%d] postPunchOutUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PostPunchOutUnprocessableEntity) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostPunchOutUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchOutInternalServerError creates a PostPunchOutInternalServerError with default headers values
func NewPostPunchOutInternalServerError() *PostPunchOutInternalServerError {
	return &PostPunchOutInternalServerError{}
}

/* PostPunchOutInternalServerError describes a response with status code 500, with default header values.

APIサーバーの内部的なエラーです。
*/
type PostPunchOutInternalServerError struct {
	Payload *kinkone.ErrorModel
}

func (o *PostPunchOutInternalServerError) Error() string {
	return fmt.Sprintf("[POST /punch/out][%d] postPunchOutInternalServerError  %+v", 500, o.Payload)
}
func (o *PostPunchOutInternalServerError) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostPunchOutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostPunchOutOKBody post punch out o k body
swagger:model PostPunchOutOKBody
*/
type PostPunchOutOKBody struct {

	// response
	Response *PostPunchOutOKBodyResponse `json:"response,omitempty"`

	// 結果コード
	ResultCode string `json:"result_code,omitempty"`

	// 結果ステータス
	Status bool `json:"status,omitempty"`
}

// Validate validates this post punch out o k body
func (o *PostPunchOutOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchOutOKBody) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(o.Response) { // not required
		return nil
	}

	if o.Response != nil {
		if err := o.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchOutOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post punch out o k body based on the context it is used
func (o *PostPunchOutOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchOutOKBody) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if o.Response != nil {
		if err := o.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchOutOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPunchOutOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPunchOutOKBody) UnmarshalBinary(b []byte) error {
	var res PostPunchOutOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostPunchOutOKBodyResponse APIレスポンス
swagger:model PostPunchOutOKBodyResponse
*/
type PostPunchOutOKBodyResponse struct {

	// attendance
	Attendance *kinkone.AttendanceModel `json:"attendance,omitempty"`
}

// Validate validates this post punch out o k body response
func (o *PostPunchOutOKBodyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttendance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchOutOKBodyResponse) validateAttendance(formats strfmt.Registry) error {
	if swag.IsZero(o.Attendance) { // not required
		return nil
	}

	if o.Attendance != nil {
		if err := o.Attendance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchOutOK" + "." + "response" + "." + "attendance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post punch out o k body response based on the context it is used
func (o *PostPunchOutOKBodyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttendance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchOutOKBodyResponse) contextValidateAttendance(ctx context.Context, formats strfmt.Registry) error {

	if o.Attendance != nil {
		if err := o.Attendance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchOutOK" + "." + "response" + "." + "attendance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPunchOutOKBodyResponse) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPunchOutOKBodyResponse) UnmarshalBinary(b []byte) error {
	var res PostPunchOutOKBodyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
