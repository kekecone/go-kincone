// Code generated by go-swagger; DO NOT EDIT.

package punch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kekecone/go-kincone/kinkone/model"
)

// PostPunchBackReader is a Reader for the PostPunchBack structure.
type PostPunchBackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPunchBackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostPunchBackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostPunchBackUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostPunchBackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostPunchBackUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostPunchBackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostPunchBackOK creates a PostPunchBackOK with default headers values
func NewPostPunchBackOK() *PostPunchBackOK {
	return &PostPunchBackOK{}
}

/* PostPunchBackOK describes a response with status code 200, with default header values.

正常時
*/
type PostPunchBackOK struct {
	Payload *PostPunchBackOKBody
}

func (o *PostPunchBackOK) Error() string {
	return fmt.Sprintf("[POST /punch/back][%d] postPunchBackOK  %+v", 200, o.Payload)
}
func (o *PostPunchBackOK) GetPayload() *PostPunchBackOKBody {
	return o.Payload
}

func (o *PostPunchBackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostPunchBackOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchBackUnauthorized creates a PostPunchBackUnauthorized with default headers values
func NewPostPunchBackUnauthorized() *PostPunchBackUnauthorized {
	return &PostPunchBackUnauthorized{}
}

/* PostPunchBackUnauthorized describes a response with status code 401, with default header values.

APIトークンの値を確認して下さい。
*/
type PostPunchBackUnauthorized struct {
	Payload *model.ErrorModel
}

func (o *PostPunchBackUnauthorized) Error() string {
	return fmt.Sprintf("[POST /punch/back][%d] postPunchBackUnauthorized  %+v", 401, o.Payload)
}
func (o *PostPunchBackUnauthorized) GetPayload() *model.ErrorModel {
	return o.Payload
}

func (o *PostPunchBackUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchBackForbidden creates a PostPunchBackForbidden with default headers values
func NewPostPunchBackForbidden() *PostPunchBackForbidden {
	return &PostPunchBackForbidden{}
}

/* PostPunchBackForbidden describes a response with status code 403, with default header values.

APIにアクセスする権限がありません。
*/
type PostPunchBackForbidden struct {
	Payload *model.ErrorModel
}

func (o *PostPunchBackForbidden) Error() string {
	return fmt.Sprintf("[POST /punch/back][%d] postPunchBackForbidden  %+v", 403, o.Payload)
}
func (o *PostPunchBackForbidden) GetPayload() *model.ErrorModel {
	return o.Payload
}

func (o *PostPunchBackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchBackUnprocessableEntity creates a PostPunchBackUnprocessableEntity with default headers values
func NewPostPunchBackUnprocessableEntity() *PostPunchBackUnprocessableEntity {
	return &PostPunchBackUnprocessableEntity{}
}

/* PostPunchBackUnprocessableEntity describes a response with status code 422, with default header values.

パラメータの値を確認して下さい。
*/
type PostPunchBackUnprocessableEntity struct {
	Payload *model.ErrorModel
}

func (o *PostPunchBackUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /punch/back][%d] postPunchBackUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PostPunchBackUnprocessableEntity) GetPayload() *model.ErrorModel {
	return o.Payload
}

func (o *PostPunchBackUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPunchBackInternalServerError creates a PostPunchBackInternalServerError with default headers values
func NewPostPunchBackInternalServerError() *PostPunchBackInternalServerError {
	return &PostPunchBackInternalServerError{}
}

/* PostPunchBackInternalServerError describes a response with status code 500, with default header values.

APIサーバーの内部的なエラーです。
*/
type PostPunchBackInternalServerError struct {
	Payload *model.ErrorModel
}

func (o *PostPunchBackInternalServerError) Error() string {
	return fmt.Sprintf("[POST /punch/back][%d] postPunchBackInternalServerError  %+v", 500, o.Payload)
}
func (o *PostPunchBackInternalServerError) GetPayload() *model.ErrorModel {
	return o.Payload
}

func (o *PostPunchBackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostPunchBackOKBody post punch back o k body
swagger:model PostPunchBackOKBody
*/
type PostPunchBackOKBody struct {

	// response
	Response *PostPunchBackOKBodyResponse `json:"response,omitempty"`

	// 結果コード
	ResultCode string `json:"result_code,omitempty"`

	// 結果ステータス
	Status bool `json:"status,omitempty"`
}

// Validate validates this post punch back o k body
func (o *PostPunchBackOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchBackOKBody) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(o.Response) { // not required
		return nil
	}

	if o.Response != nil {
		if err := o.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchBackOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post punch back o k body based on the context it is used
func (o *PostPunchBackOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchBackOKBody) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if o.Response != nil {
		if err := o.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchBackOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPunchBackOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPunchBackOKBody) UnmarshalBinary(b []byte) error {
	var res PostPunchBackOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostPunchBackOKBodyResponse APIレスポンス
swagger:model PostPunchBackOKBodyResponse
*/
type PostPunchBackOKBodyResponse struct {

	// attendance
	Attendance *model.AttendanceModel `json:"attendance,omitempty"`
}

// Validate validates this post punch back o k body response
func (o *PostPunchBackOKBodyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttendance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchBackOKBodyResponse) validateAttendance(formats strfmt.Registry) error {
	if swag.IsZero(o.Attendance) { // not required
		return nil
	}

	if o.Attendance != nil {
		if err := o.Attendance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchBackOK" + "." + "response" + "." + "attendance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post punch back o k body response based on the context it is used
func (o *PostPunchBackOKBodyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttendance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPunchBackOKBodyResponse) contextValidateAttendance(ctx context.Context, formats strfmt.Registry) error {

	if o.Attendance != nil {
		if err := o.Attendance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPunchBackOK" + "." + "response" + "." + "attendance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPunchBackOKBodyResponse) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPunchBackOKBodyResponse) UnmarshalBinary(b []byte) error {
	var res PostPunchBackOKBodyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
