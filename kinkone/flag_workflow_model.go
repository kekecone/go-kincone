// Code generated by go-swagger; DO NOT EDIT.

package kinkone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FlagWorkflowModel 休日等の申請
//
// swagger:model flagWorkflowModel
type FlagWorkflowModel struct {

	// 申請日
	AppliedDate string `json:"applied_date,omitempty"`

	// 差戻しコメント
	BackComment string `json:"back_comment,omitempty"`

	// 申請コメント
	Comment string `json:"comment,omitempty"`

	// 承認日
	ConfirmedDate string `json:"confirmed_date,omitempty"`

	// 適用される日
	Dates []string `json:"dates"`

	// メールアドレス
	Email string `json:"email,omitempty"`

	// 期間終了日
	EndDate string `json:"end_date,omitempty"`

	// 休日は除く
	ExcludingHolidays bool `json:"excluding_holidays,omitempty"`

	// 姓
	FamilyName string `json:"family_name,omitempty"`

	// 名
	FirstName string `json:"first_name,omitempty"`

	// 休日等の種別
	Flag *FlagModel `json:"flag,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// 期間開始日
	StartDate string `json:"start_date,omitempty"`

	// 申請ステータス（1: 差戻し, 2: 申請済み, 3: 承認）
	Status int64 `json:"status,omitempty"`

	// 従業員番号
	UserNumber string `json:"user_number,omitempty"`
}

// Validate validates this flag workflow model
func (m *FlagWorkflowModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlagWorkflowModel) validateFlag(formats strfmt.Registry) error {
	if swag.IsZero(m.Flag) { // not required
		return nil
	}

	if m.Flag != nil {
		if err := m.Flag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flag")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this flag workflow model based on the context it is used
func (m *FlagWorkflowModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FlagWorkflowModel) contextValidateFlag(ctx context.Context, formats strfmt.Registry) error {

	if m.Flag != nil {
		if err := m.Flag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flag")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FlagWorkflowModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlagWorkflowModel) UnmarshalBinary(b []byte) error {
	var res FlagWorkflowModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
