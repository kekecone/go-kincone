// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserModel 従業員情報
//
// swagger:model userModel
type UserModel struct {

	// 登録日時
	Created string `json:"created,omitempty"`

	// 部署
	Departments []*UserModelDepartmentsItems0 `json:"departments"`

	// メールアドレス
	Email string `json:"email,omitempty"`

	// 姓
	FamilyName string `json:"family_name,omitempty"`

	// 名
	FirstName string `json:"first_name,omitempty"`

	// 入社日
	HireDate string `json:"hire_date,omitempty"`

	// 姓（カナ）
	KanaFamilyName string `json:"kana_family_name,omitempty"`

	// 名（カナ）
	KanaFirstName string `json:"kana_first_name,omitempty"`

	// 退社日
	LeaveDate string `json:"leave_date,omitempty"`

	// 定期概要
	PassNote string `json:"pass_note,omitempty"`

	// 定期代
	PassPrice string `json:"pass_price,omitempty"`

	// 就業形態名称
	RegulationName string `json:"regulation_name,omitempty"`

	// 権限名
	RoleName string `json:"role_name,omitempty"`

	// 物販を読み取る
	SaveBuying bool `json:"save_buying,omitempty"`

	// 従業員番号
	UserNumber string `json:"user_number,omitempty"`
}

// Validate validates this user model
func (m *UserModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserModel) validateDepartments(formats strfmt.Registry) error {
	if swag.IsZero(m.Departments) { // not required
		return nil
	}

	for i := 0; i < len(m.Departments); i++ {
		if swag.IsZero(m.Departments[i]) { // not required
			continue
		}

		if m.Departments[i] != nil {
			if err := m.Departments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user model based on the context it is used
func (m *UserModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepartments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserModel) contextValidateDepartments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Departments); i++ {

		if m.Departments[i] != nil {
			if err := m.Departments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("departments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserModel) UnmarshalBinary(b []byte) error {
	var res UserModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserModelDepartmentsItems0 user model departments items0
//
// swagger:model UserModelDepartmentsItems0
type UserModelDepartmentsItems0 struct {

	// 部署名
	Name string `json:"name,omitempty"`
}

// Validate validates this user model departments items0
func (m *UserModelDepartmentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user model departments items0 based on context it is used
func (m *UserModelDepartmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserModelDepartmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserModelDepartmentsItems0) UnmarshalBinary(b []byte) error {
	var res UserModelDepartmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
