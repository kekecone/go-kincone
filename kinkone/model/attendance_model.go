// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AttendanceModel 勤怠明細
//
// swagger:model attendanceModel
type AttendanceModel struct {

	// 欠勤フラグ
	Absence bool `json:"absence,omitempty"`

	// 実労働時間
	ActualWorkHours string `json:"actual_work_hours,omitempty"`

	// 徹夜フラグ
	Allnight bool `json:"allnight,omitempty"`

	// 休憩時間
	BreakHours string `json:"break_hours,omitempty"`

	// 休憩
	Breaks []*BreakModel `json:"breaks"`

	// 遅刻フラグ
	ComeLate bool `json:"come_late,omitempty"`

	// 遅刻時間
	ComeLateHours string `json:"come_late_hours,omitempty"`

	// 代休フラグ
	Daikyu bool `json:"daikyu,omitempty"`

	// 退勤日時
	End string `json:"end,omitempty"`

	// 退勤時レコーダー名
	EndDevice string `json:"end_device,omitempty"`

	// 退勤時緯度
	EndLatitude string `json:"end_latitude,omitempty"`

	// 退勤時経度
	EndLongitude string `json:"end_longitude,omitempty"`

	// 合計労働時間
	FilledWorkHours string `json:"filled_work_hours,omitempty"`

	// 適用労働時間
	FixedWorkHours string `json:"fixed_work_hours,omitempty"`

	// 休日等の種別
	Flags []*FlagModel `json:"flags"`

	// 振休フラグ
	Furikyu bool `json:"furikyu,omitempty"`

	// 時間休
	HourlyPaidLeave string `json:"hourly_paid_leave,omitempty"`

	// 含まれる休憩時間
	IncludedBreakHours string `json:"included_break_hours,omitempty"`

	// 深夜労働時間
	LatenightWorkHours string `json:"latenight_work_hours,omitempty"`

	// 早退フラグ
	LeaveEarly bool `json:"leave_early,omitempty"`

	// 早退時間
	LeaveEarlyHours string `json:"leave_early_hours,omitempty"`

	// 備考
	Note string `json:"note,omitempty"`

	// 時間外労働時間
	OvertimeWorkHours string `json:"overtime_work_hours,omitempty"`

	// 有給取得日数
	PaidHoliday string `json:"paid_holiday,omitempty"`

	// 所定労働時間
	RegularWorkHours string `json:"regular_work_hours,omitempty"`

	// 出勤日時
	Start string `json:"start,omitempty"`

	// 出勤時レコーダー名
	StartDevice string `json:"start_device,omitempty"`

	// 出勤時緯度
	StartLatitude string `json:"start_latitude,omitempty"`

	// 出勤時経度
	StartLongitude string `json:"start_longitude,omitempty"`

	// 出勤日
	WorkDay string `json:"work_day,omitempty"`

	// 総労働時間
	WorkHours string `json:"work_hours,omitempty"`

	// 承認済み休日出勤フラグ
	WorkOnDayOff bool `json:"work_on_day_off,omitempty"`
}

// Validate validates this attendance model
func (m *AttendanceModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreaks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttendanceModel) validateBreaks(formats strfmt.Registry) error {
	if swag.IsZero(m.Breaks) { // not required
		return nil
	}

	for i := 0; i < len(m.Breaks); i++ {
		if swag.IsZero(m.Breaks[i]) { // not required
			continue
		}

		if m.Breaks[i] != nil {
			if err := m.Breaks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("breaks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttendanceModel) validateFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	for i := 0; i < len(m.Flags); i++ {
		if swag.IsZero(m.Flags[i]) { // not required
			continue
		}

		if m.Flags[i] != nil {
			if err := m.Flags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this attendance model based on the context it is used
func (m *AttendanceModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreaks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttendanceModel) contextValidateBreaks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Breaks); i++ {

		if m.Breaks[i] != nil {
			if err := m.Breaks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("breaks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttendanceModel) contextValidateFlags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Flags); i++ {

		if m.Flags[i] != nil {
			if err := m.Flags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttendanceModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttendanceModel) UnmarshalBinary(b []byte) error {
	var res AttendanceModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
