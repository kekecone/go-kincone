// Code generated by go-swagger; DO NOT EDIT.

package kinkone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExpenseWorkflowModel 交通費申請
//
// swagger:model expenseWorkflowModel
type ExpenseWorkflowModel struct {

	// 申請日
	AppliedDate string `json:"applied_date,omitempty"`

	// 差戻しコメント
	BackComment string `json:"back_comment,omitempty"`

	// 申請コメント
	Comment string `json:"comment,omitempty"`

	// 承認日
	ConfirmedDate string `json:"confirmed_date,omitempty"`

	// 明細件数
	Count int64 `json:"count,omitempty"`

	// 交通費明細
	Details []*ExpenseModel `json:"details"`

	// メールアドレス
	Email string `json:"email,omitempty"`

	// 期間終了日
	EndDate string `json:"end_date,omitempty"`

	// 姓
	FamilyName string `json:"family_name,omitempty"`

	// 名
	FirstName string `json:"first_name,omitempty"`

	// ID
	ID string `json:"id,omitempty"`

	// 定期概要
	PassNote string `json:"pass_note,omitempty"`

	// 定期代
	PassPrice string `json:"pass_price,omitempty"`

	// 期間開始日
	StartDate string `json:"start_date,omitempty"`

	// 申請ステータス（1: 差戻し, 2: 申請済み, 3: 承認）
	Status int64 `json:"status,omitempty"`

	// 交通費合計
	Total int64 `json:"total,omitempty"`

	// 従業員番号
	UserNumber string `json:"user_number,omitempty"`
}

// Validate validates this expense workflow model
func (m *ExpenseWorkflowModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpenseWorkflowModel) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this expense workflow model based on the context it is used
func (m *ExpenseWorkflowModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpenseWorkflowModel) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Details); i++ {

		if m.Details[i] != nil {
			if err := m.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExpenseWorkflowModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExpenseWorkflowModel) UnmarshalBinary(b []byte) error {
	var res ExpenseWorkflowModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
