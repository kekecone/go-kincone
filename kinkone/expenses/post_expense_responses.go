// Code generated by go-swagger; DO NOT EDIT.

package expenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kekecone/go-kincone/kinkone"
)

// PostExpenseReader is a Reader for the PostExpense structure.
type PostExpenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostExpenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostExpenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostExpenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostExpenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostExpenseUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostExpenseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostExpenseOK creates a PostExpenseOK with default headers values
func NewPostExpenseOK() *PostExpenseOK {
	return &PostExpenseOK{}
}

/* PostExpenseOK describes a response with status code 200, with default header values.

正常時
*/
type PostExpenseOK struct {
	Payload *PostExpenseOKBody
}

func (o *PostExpenseOK) Error() string {
	return fmt.Sprintf("[POST /expense][%d] postExpenseOK  %+v", 200, o.Payload)
}
func (o *PostExpenseOK) GetPayload() *PostExpenseOKBody {
	return o.Payload
}

func (o *PostExpenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostExpenseOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostExpenseUnauthorized creates a PostExpenseUnauthorized with default headers values
func NewPostExpenseUnauthorized() *PostExpenseUnauthorized {
	return &PostExpenseUnauthorized{}
}

/* PostExpenseUnauthorized describes a response with status code 401, with default header values.

APIトークンの値を確認して下さい。
*/
type PostExpenseUnauthorized struct {
	Payload *kinkone.ErrorModel
}

func (o *PostExpenseUnauthorized) Error() string {
	return fmt.Sprintf("[POST /expense][%d] postExpenseUnauthorized  %+v", 401, o.Payload)
}
func (o *PostExpenseUnauthorized) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostExpenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostExpenseForbidden creates a PostExpenseForbidden with default headers values
func NewPostExpenseForbidden() *PostExpenseForbidden {
	return &PostExpenseForbidden{}
}

/* PostExpenseForbidden describes a response with status code 403, with default header values.

APIにアクセスする権限がありません。
*/
type PostExpenseForbidden struct {
	Payload *kinkone.ErrorModel
}

func (o *PostExpenseForbidden) Error() string {
	return fmt.Sprintf("[POST /expense][%d] postExpenseForbidden  %+v", 403, o.Payload)
}
func (o *PostExpenseForbidden) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostExpenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostExpenseUnprocessableEntity creates a PostExpenseUnprocessableEntity with default headers values
func NewPostExpenseUnprocessableEntity() *PostExpenseUnprocessableEntity {
	return &PostExpenseUnprocessableEntity{}
}

/* PostExpenseUnprocessableEntity describes a response with status code 422, with default header values.

パラメータの値を確認して下さい。
*/
type PostExpenseUnprocessableEntity struct {
	Payload *kinkone.ErrorModel
}

func (o *PostExpenseUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /expense][%d] postExpenseUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PostExpenseUnprocessableEntity) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostExpenseUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostExpenseInternalServerError creates a PostExpenseInternalServerError with default headers values
func NewPostExpenseInternalServerError() *PostExpenseInternalServerError {
	return &PostExpenseInternalServerError{}
}

/* PostExpenseInternalServerError describes a response with status code 500, with default header values.

APIサーバーの内部的なエラーです。
*/
type PostExpenseInternalServerError struct {
	Payload *kinkone.ErrorModel
}

func (o *PostExpenseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /expense][%d] postExpenseInternalServerError  %+v", 500, o.Payload)
}
func (o *PostExpenseInternalServerError) GetPayload() *kinkone.ErrorModel {
	return o.Payload
}

func (o *PostExpenseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kinkone.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostExpenseOKBody post expense o k body
swagger:model PostExpenseOKBody
*/
type PostExpenseOKBody struct {

	// response
	Response *PostExpenseOKBodyResponse `json:"response,omitempty"`

	// 結果コード
	ResultCode string `json:"result_code,omitempty"`

	// 結果ステータス
	Status bool `json:"status,omitempty"`
}

// Validate validates this post expense o k body
func (o *PostExpenseOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostExpenseOKBody) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(o.Response) { // not required
		return nil
	}

	if o.Response != nil {
		if err := o.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postExpenseOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post expense o k body based on the context it is used
func (o *PostExpenseOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostExpenseOKBody) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if o.Response != nil {
		if err := o.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postExpenseOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostExpenseOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostExpenseOKBody) UnmarshalBinary(b []byte) error {
	var res PostExpenseOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostExpenseOKBodyResponse APIレスポンス
swagger:model PostExpenseOKBodyResponse
*/
type PostExpenseOKBodyResponse struct {

	// expense
	Expense *kinkone.ExpenseModel `json:"expense,omitempty"`
}

// Validate validates this post expense o k body response
func (o *PostExpenseOKBodyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpense(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostExpenseOKBodyResponse) validateExpense(formats strfmt.Registry) error {
	if swag.IsZero(o.Expense) { // not required
		return nil
	}

	if o.Expense != nil {
		if err := o.Expense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postExpenseOK" + "." + "response" + "." + "expense")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post expense o k body response based on the context it is used
func (o *PostExpenseOKBodyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExpense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostExpenseOKBodyResponse) contextValidateExpense(ctx context.Context, formats strfmt.Registry) error {

	if o.Expense != nil {
		if err := o.Expense.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postExpenseOK" + "." + "response" + "." + "expense")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostExpenseOKBodyResponse) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostExpenseOKBodyResponse) UnmarshalBinary(b []byte) error {
	var res PostExpenseOKBodyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
