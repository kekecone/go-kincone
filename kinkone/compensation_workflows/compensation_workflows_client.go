// Code generated by go-swagger; DO NOT EDIT.

package compensation_workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new compensation workflows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compensation workflows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCompensationWorkflowWorkflowID(params *DeleteCompensationWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCompensationWorkflowWorkflowIDOK, error)

	GetCompensationWorkflows(params *GetCompensationWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCompensationWorkflowsOK, error)

	PostCompensationWorkflowWorkflowID(params *PostCompensationWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCompensationWorkflowWorkflowIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCompensationWorkflowWorkflowID 休日出勤s 振休 代休の差戻し

  指定した申請IDに該当する休日出勤・振休・代休の申請を差戻します。
*/
func (a *Client) DeleteCompensationWorkflowWorkflowID(params *DeleteCompensationWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCompensationWorkflowWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCompensationWorkflowWorkflowIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCompensationWorkflowWorkflowID",
		Method:             "DELETE",
		PathPattern:        "/compensation/workflow/{workflowID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCompensationWorkflowWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCompensationWorkflowWorkflowIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCompensationWorkflowWorkflowID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompensationWorkflows 休日出勤s 振休 代休の申請一覧取得

  指定した期間の休日出勤・振休・代休の申請一覧を返します。
*/
func (a *Client) GetCompensationWorkflows(params *GetCompensationWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCompensationWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompensationWorkflowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCompensationWorkflows",
		Method:             "GET",
		PathPattern:        "/compensation/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompensationWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompensationWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCompensationWorkflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostCompensationWorkflowWorkflowID 休日出勤s 振休 代休の申請承認

  指定した申請IDに該当する休日出勤・振休・代休を承認します。
*/
func (a *Client) PostCompensationWorkflowWorkflowID(params *PostCompensationWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCompensationWorkflowWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCompensationWorkflowWorkflowIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCompensationWorkflowWorkflowID",
		Method:             "POST",
		PathPattern:        "/compensation/workflow/{workflowID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCompensationWorkflowWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCompensationWorkflowWorkflowIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCompensationWorkflowWorkflowID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
