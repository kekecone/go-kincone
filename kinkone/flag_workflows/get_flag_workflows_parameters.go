// Code generated by go-swagger; DO NOT EDIT.

package flag_workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFlagWorkflowsParams creates a new GetFlagWorkflowsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFlagWorkflowsParams() *GetFlagWorkflowsParams {
	return &GetFlagWorkflowsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFlagWorkflowsParamsWithTimeout creates a new GetFlagWorkflowsParams object
// with the ability to set a timeout on a request.
func NewGetFlagWorkflowsParamsWithTimeout(timeout time.Duration) *GetFlagWorkflowsParams {
	return &GetFlagWorkflowsParams{
		timeout: timeout,
	}
}

// NewGetFlagWorkflowsParamsWithContext creates a new GetFlagWorkflowsParams object
// with the ability to set a context for a request.
func NewGetFlagWorkflowsParamsWithContext(ctx context.Context) *GetFlagWorkflowsParams {
	return &GetFlagWorkflowsParams{
		Context: ctx,
	}
}

// NewGetFlagWorkflowsParamsWithHTTPClient creates a new GetFlagWorkflowsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFlagWorkflowsParamsWithHTTPClient(client *http.Client) *GetFlagWorkflowsParams {
	return &GetFlagWorkflowsParams{
		HTTPClient: client,
	}
}

/* GetFlagWorkflowsParams contains all the parameters to send to the API endpoint
   for the get flag workflows operation.

   Typically these are written to a http.Request.
*/
type GetFlagWorkflowsParams struct {

	/* DepartmentName.

	   部署・店舗名
	*/
	DepartmentName *string

	/* Email.

	   メールアドレス
	*/
	Email *string

	/* Status.

	   ステータス（0: 全て, 1: 差戻し, 2: 申請済み, 3: 承認）
	*/
	Status *int64

	/* Term.

	   年月（YYYYMM）。指定された年月のデータを返します。省略時は当月のデータを返します。
	*/
	Term *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get flag workflows params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFlagWorkflowsParams) WithDefaults() *GetFlagWorkflowsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get flag workflows params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFlagWorkflowsParams) SetDefaults() {
	var (
		statusDefault = int64(0)
	)

	val := GetFlagWorkflowsParams{
		Status: &statusDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get flag workflows params
func (o *GetFlagWorkflowsParams) WithTimeout(timeout time.Duration) *GetFlagWorkflowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get flag workflows params
func (o *GetFlagWorkflowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get flag workflows params
func (o *GetFlagWorkflowsParams) WithContext(ctx context.Context) *GetFlagWorkflowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get flag workflows params
func (o *GetFlagWorkflowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get flag workflows params
func (o *GetFlagWorkflowsParams) WithHTTPClient(client *http.Client) *GetFlagWorkflowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get flag workflows params
func (o *GetFlagWorkflowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepartmentName adds the departmentName to the get flag workflows params
func (o *GetFlagWorkflowsParams) WithDepartmentName(departmentName *string) *GetFlagWorkflowsParams {
	o.SetDepartmentName(departmentName)
	return o
}

// SetDepartmentName adds the departmentName to the get flag workflows params
func (o *GetFlagWorkflowsParams) SetDepartmentName(departmentName *string) {
	o.DepartmentName = departmentName
}

// WithEmail adds the email to the get flag workflows params
func (o *GetFlagWorkflowsParams) WithEmail(email *string) *GetFlagWorkflowsParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get flag workflows params
func (o *GetFlagWorkflowsParams) SetEmail(email *string) {
	o.Email = email
}

// WithStatus adds the status to the get flag workflows params
func (o *GetFlagWorkflowsParams) WithStatus(status *int64) *GetFlagWorkflowsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get flag workflows params
func (o *GetFlagWorkflowsParams) SetStatus(status *int64) {
	o.Status = status
}

// WithTerm adds the term to the get flag workflows params
func (o *GetFlagWorkflowsParams) WithTerm(term *string) *GetFlagWorkflowsParams {
	o.SetTerm(term)
	return o
}

// SetTerm adds the term to the get flag workflows params
func (o *GetFlagWorkflowsParams) SetTerm(term *string) {
	o.Term = term
}

// WriteToRequest writes these params to a swagger request
func (o *GetFlagWorkflowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DepartmentName != nil {

		// query param department_name
		var qrDepartmentName string

		if o.DepartmentName != nil {
			qrDepartmentName = *o.DepartmentName
		}
		qDepartmentName := qrDepartmentName
		if qDepartmentName != "" {

			if err := r.SetQueryParam("department_name", qDepartmentName); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus int64

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := swag.FormatInt64(qrStatus)
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Term != nil {

		// query param term
		var qrTerm string

		if o.Term != nil {
			qrTerm = *o.Term
		}
		qTerm := qrTerm
		if qTerm != "" {

			if err := r.SetQueryParam("term", qTerm); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
