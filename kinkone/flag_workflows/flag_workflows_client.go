// Code generated by go-swagger; DO NOT EDIT.

package flag_workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new flag workflows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flag workflows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteFlagWorkflowWorkflowID(params *DeleteFlagWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFlagWorkflowWorkflowIDOK, error)

	GetFlagWorkflows(params *GetFlagWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlagWorkflowsOK, error)

	PostFlagWorkflowWorkflowID(params *PostFlagWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFlagWorkflowWorkflowIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteFlagWorkflowWorkflowID 休日等の申請差戻しs

  指定した申請IDに該当する休日等の申請を差戻します。
*/
func (a *Client) DeleteFlagWorkflowWorkflowID(params *DeleteFlagWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFlagWorkflowWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlagWorkflowWorkflowIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteFlagWorkflowWorkflowID",
		Method:             "DELETE",
		PathPattern:        "/flag/workflow/{workflowID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFlagWorkflowWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFlagWorkflowWorkflowIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteFlagWorkflowWorkflowID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFlagWorkflows 休日等の申請一覧取得s

  指定した期間の休日等の申請一覧を返します。
*/
func (a *Client) GetFlagWorkflows(params *GetFlagWorkflowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFlagWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlagWorkflowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFlagWorkflows",
		Method:             "GET",
		PathPattern:        "/flag/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFlagWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlagWorkflowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFlagWorkflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostFlagWorkflowWorkflowID 休日等の申請承認s

  指定した申請IDに該当する休日等の申請を承認します。
*/
func (a *Client) PostFlagWorkflowWorkflowID(params *PostFlagWorkflowWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostFlagWorkflowWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFlagWorkflowWorkflowIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostFlagWorkflowWorkflowID",
		Method:             "POST",
		PathPattern:        "/flag/workflow/{workflowID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFlagWorkflowWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFlagWorkflowWorkflowIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostFlagWorkflowWorkflowID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
